{
  "hash": "dc388a54a8e28a68873918d981ce8e54",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"rix: environnements de développement reproductibles pour développeurs R\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    embed-resources: true\n    slide-number: true\n    theme: solarized\n    incremental: true\nexecute:\n  echo: true\n---\n\n\n## Qui suis-je?\n\n- Bruno Rodrigues, responsable des départements \"statistiques\" et \"stratégie de données\" du Ministère \n  de la Recherche et de l’Enseignement supérieur au Luxembourg\n\n- Utilisateur de R depuis 2009\n\n- Cette présentation est disponible sur le lien suivant [https://is.gd/nix_rr_2024](https://is.gd/nix_rr_2024)\n\n- Code source disponible ici: [https://github.com/b-rodrigues/rr_2024/blob/main/presentation/pres_rr_2024.qmd](https://github.com/b-rodrigues/rr_2024/blob/main/presentation/pres_rr_2024.qmd)\n\n## Nix et les problèmes qu'il résout\n\n- Nix: un gestionnaire de paquets dispo pour Linux, Windows (via WSL2) et macOS\n- Permet de construire des environnements de développements reproductibles\n- Autrement dit, adieu...\n- ... la collaboration sur environnements hétérogènes\n- ... les projets pas reproductibles\n- ... pas pouvoir déployer le même environnement \"partout\"\n\n## La solution \"classique\"\n\n- Docker + `{renv}` (ou autre tant qu'on arrive à installer...)\n- ... les mêmes paquets R\n- ... la même version de R\n- ... les mêmes dépendances \"système\" (`gdal` pour `{terra}` par exemple)\n\n## Le gestionnaire de paquets Nix (1/3)\n\n- Pas une alternative à Docker!\n- Mais permet de résoudre les mêmes problèmes\n- La promesse de Nix:\n\n. . .\n\n*Installe tous les logiciels nécessaires (R, paquets R, librairies de développement,\netc) de manière totalement reproductible et sur n'importe quelle plate-forme en écrivant\nune seule expression dans le langage Nix.*\n\n## Le gestionnaire de paquets Nix (2/3)\n\n- Avec Nix, on configure une fois et on exécute partout!\n- Partout: ordinateur ou serveur: Windows (via WSL2), Linux (même Android) ou macOS\n- Pour R: 99% des paquets CRAN + Bioconductor disponibles\n- Aussi possible d'installer des paquets Git-hub/lab\n\n## Le gestionnaire de paquets Nix (3/3)\n\n- Nix: gestionnaire de paquets *fonctionnel* (inspiré du lambda-calcul)\n\n. . .\n\n![Attention aux effets de bord!](img/procedural_vs_fonctional.png)\n\n## Un gestionnaire de paquets fonctionnel et déclaratif\n\nNix utilise des expressions écrite dans le langage Nix pour installer des paquets:\n\n```\nlet\n  pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz\") {};\n  system_packages = builtins.attrValues {\n    inherit (pkgs) R ;\n  };\nin\n  pkgs.mkShell {\n    buildInputs = [ system_packages ];\n    shellHook = \"R --vanilla\";\n  }\n```\n\n\n## Le langage nix\n\n- Écrire ces expressions nécessite l'apprentissage d'une nouveau langage\n- Un langage puissant certes... mais si tout ce qu'on veut c'est des environnements de développement reproductibles...\n- ...alors `{rix}` est la solution!\n\n## rix: usage de base (1/2)\n\n- `{rix}` ([site](https://b-rodrigues.github.io/rix/index.html)) génère des expressions Nix!\n- Il suffit d'utiliser la fonction `rix()`:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(r_ver = \"4.3.1\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"rstudio\",\n    project_path = \".\")\n```\n:::\n\n\n- Génère `default.nix` avec l'expression Nix qu'il faut!\n\n## rix: usage de base (2/2)\n\n- Build: `nix-build`\n- Run: `nix-shell`\n\n## rix: usage de base (2/2)\n\n\n{{< video https://youtu.be/oKmFNQ-AzeQ >}}\n\n\n\n## rix et targets\n\n\n{{< video https://youtu.be/GMDWZqzvl9c >}}\n\n\n\n## rix et targets\n\n- Aussi possible d'exécuter les pipelines sur Github Actions!\n- `rix::tar_nix_ga()` génère le fichier yaml qu'il faut\n- On commit et pousse et c'est parti!\n\n## rix et targets\n\n\n{{< video https://youtu.be/gQ7NN_ZIcY0 >}}\n\n\n\n\n## rix et les subshells\n\n- Possible d'exécuter du code dans un \"sous-environnement\"\n- On peut récupérer le résultat dans la session principale!\n\n## rix et les subshells\n\n\n{{< video https://youtu.be/bz-A-uS-cIw >}}\n\n\n\n## Pour en apprendre plus\n\n- Documentation officielle de Nix: [https://nix.dev/](https://nix.dev/)\n\n- Nix pills: [https://nixos.org/guides/nix-pills/00-preface](https://nixos.org/guides/nix-pills/00-preface)\n\n- Tuto Nix par l'INRIA: [https://nix-tutorial.gitlabpages.inria.fr/nix-tutorial/](https://nix-tutorial.gitlabpages.inria.fr/nix-tutorial/)\n\n- rix: [https://b-rodrigues.github.io/rix/](https://b-rodrigues.github.io/rix/)\n\n- Mon blog: [https://www.brodrigues.co/tags/nix/](https://www.brodrigues.co/tags/nix/)\n\n- Mon livre (ne parle pas de Nix, mais de reproductibilité avec Docker et renv): [https://raps-with-r.dev/](https://raps-with-r.dev/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}